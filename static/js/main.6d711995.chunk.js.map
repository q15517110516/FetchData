{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","$","ajaxPrefilter","options","crossDomain","support","cors","url","get","then","res","sites","setState","className","type","onClick","loadData","scope","this","map","id","name","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iSAuGeA,G,YAhGf,kDAGE,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,KAAM,IAHG,EAHf,uDAUa,IAAD,OAKRC,IAAEC,eAAc,SAASC,GACnBA,EAAQC,aAAeH,IAAEI,QAAQC,OACjCH,EAAQI,IAAM,uCAAyCJ,EAAQI,QAIrEN,IAAEO,IAAI,uCACLC,MAAK,SAAAC,GAAQ,IACJC,EAAUD,EAAVC,MACR,EAAKC,SAAS,CACZZ,KAAMW,SAzBd,+BA+DY,IAAD,OACP,OACE,yBAAKE,UAAU,QACb,yBAAKA,UAAU,eACb,4BAAQC,KAAK,SAASD,UAAU,kBAAkBE,QAAS,kBAAM,EAAKC,aAAtE,cAEF,2BAAOH,UAAU,SACf,+BACE,4BACE,wBAAII,MAAM,OAAV,MACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SAGJ,+BAEIC,KAAKnB,MAAMC,KAAKmB,KAAI,YAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,KAAMd,EAAS,EAATA,IAC9B,OACE,wBAAIe,IAAKF,GACP,4BAAKA,GACL,4BAAKC,GACL,4BAAKd,cApFzB,GAAyBgB,cCKLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d711995.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport axios from 'axios';\nimport \"./App.css\"\n\n\nexport class App extends Component {\n\n\n  constructor(){\n    super();\n    this.state = {\n      data: [],\n    }\n  }\n\n  loadData(){\n\n    \n    //NOTE\n    //Method 1: Use jQuery \n    $.ajaxPrefilter(function(options) {\n      if (options.crossDomain && $.support.cors) {\n          options.url = 'https://cors-anywhere.herokuapp.com/' + options.url;\n      }\n    });\n\n    $.get('http://aimtell.com/files/sites.json')\n    .then(res => {\n      const { sites } = res;\n      this.setState({\n        data: sites,\n      })\n    })\n\n    //NOTE\n    // Method 2: Use Axios call to load data\n    //Use Cors-Anywhere proxy\n    // (function() {\n    //   var cors_api_host = 'cors-anywhere.herokuapp.com';\n    //   var cors_api_url = 'https://' + cors_api_host + '/';\n    //   var slice = [].slice;\n    //   var origin = window.location.protocol + '//' + window.location.host;\n    //   var open = XMLHttpRequest.prototype.open;\n    //   XMLHttpRequest.prototype.open = function() {\n    //       var args = slice.call(arguments);\n    //       var targetOrigin = /^https?:\\/\\/([^\\/]+)/i.exec(args[1]);\n    //       if (targetOrigin && targetOrigin[0].toLowerCase() !== origin &&\n    //           targetOrigin[1] !== cors_api_host) {\n    //           args[1] = cors_api_url + args[1];\n    //       }\n    //       return open.apply(this, args);\n    //   };\n    // })();\n\n    // axios.get(\"http://aimtell.com/files/sites.json\")\n    //       .then(res => {\n    //         this.setState({\n    //           data: res.data.sites,\n    //         })\n    //       })\n    //       .catch(err => {\n    //         console.log(err);\n    //       });\n\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"load-button\">\n          <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.loadData()}>Load Data</button>\n        </div>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th scope=\"col\">id</th>\n              <th scope=\"col\">Name</th>\n              <th scope=\"col\">URL</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.state.data.map(({id, name, url}) => {\n                return(\n                  <tr key={id}>\n                    <td>{id}</td>\n                    <td>{name}</td>\n                    <td>{url}</td>\n                  </tr>\n                )\n              })\n            }\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}